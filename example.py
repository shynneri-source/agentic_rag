"""
Example script ƒë·ªÉ ch·∫°y agentic RAG agent
Ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p c√¢u h·ªèi v√† agent s·∫Ω t·ª± ƒë·ªông t√¨m ki·∫øm v√† tr·∫£ l·ªùi
"""

from langchain_core.messages import HumanMessage
from agent.agent import graph
from agent.config import Configuration


def run_agent(question: str):
    """
    Ch·∫°y agent v·ªõi c√¢u h·ªèi ƒë·∫ßu v√†o
    
    Args:
        question: C√¢u h·ªèi c·∫ßn tr·∫£ l·ªùi
    
    Returns:
        K·∫øt qu·∫£ t·ª´ agent
    """
    
    # C·∫•u h√¨nh cho agent
    config = {
        "configurable": {
            "query_generator_model": "qwen/qwen3-4b",
            "reflection_model": "qwen/qwen3-4b", 
            "rag_model": "qwen/qwen3-4b",
            "answer_model": "qwen/qwen3-4b",
            "max_rag_loops": 3,
            "number_of_initial_queries": 2
        }
    }
    
    # Kh·ªüi t·∫°o state ban ƒë·∫ßu
    initial_state = {
        "user_messages": [HumanMessage(content=question)],
        "rag_query": [],
        "rag_query_result": [],
        "source_gathered": [],
        "initial_rag_query_count": 2,
        "max_rag_loops": 3,
        "rag_loop_count": 0,
        "reasoning_model": "qwen/qwen3-4b"
    }
    
    print(f"ü§ñ Agent ƒëang x·ª≠ l√Ω c√¢u h·ªèi: {question}")
    print("=" * 50)
    
    try:
        # Ch·∫°y agent
        print("üîç B·∫Øt ƒë·∫ßu ch·∫°y agent...")
        result = graph.invoke(initial_state, config=config)
        
        print(f"üîç K·∫øt qu·∫£ t·ª´ agent c√≥ type: {type(result)}")
        if isinstance(result, dict):
            print(f"üîç Keys trong result: {list(result.keys())}")
        
        # L·∫•y c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
        if "user_messages" in result and result["user_messages"]:
            answer = result["user_messages"][-1].content
            print(f"‚úÖ C√¢u tr·∫£ l·ªùi:")
            print(answer)
            print("=" * 50)
            
            # Hi·ªÉn th·ªã th√¥ng tin th√™m
            if "source_gathered" in result and result["source_gathered"]:
                print(f"üìö Ngu·ªìn tham kh·∫£o: {', '.join(set(result['source_gathered']))}")
            
            if "rag_loop_count" in result:
                print(f"üîÑ S·ªë v√≤ng l·∫∑p RAG: {result['rag_loop_count']}")
                
            return answer
        else:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi")
            print(f"üîç user_messages c√≥ trong result? {'user_messages' in result if isinstance(result, dict) else 'result is not dict'}")
            return None
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y agent: {str(e)}")
        print(f"üîç Lo·∫°i l·ªói: {type(e)}")
        import traceback
        print(f"üîç Traceback:")
        traceback.print_exc()
        return None


def interactive_mode():
    """
    Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c - ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p nhi·ªÅu c√¢u h·ªèi
    """
    print("üöÄ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Agentic RAG Agent!")
    print("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (nh·∫≠p 'quit' ƒë·ªÉ tho√°t):")
    print("=" * 50)
    
    while True:
        try:
            question = input("\nüí≠ C√¢u h·ªèi c·ªßa b·∫°n: ").strip()
            
            if question.lower() in ['quit', 'exit', 'q']:
                print("üëã T·∫°m bi·ªát!")
                break
                
            if not question:
                print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
                continue
                
            run_agent(question)
            
        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")


def main():
    """
    H√†m main - c√≥ th·ªÉ ch·∫°y interactive mode ho·∫∑c test v·ªõi c√¢u h·ªèi m·∫´u
    """
    import sys
    
    if len(sys.argv) > 1:
        # N·∫øu c√≥ argument, s·ª≠ d·ª•ng nh∆∞ c√¢u h·ªèi
        question = " ".join(sys.argv[1:])
        run_agent(question)
    else:
        # Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c
        interactive_mode()


if __name__ == "__main__":
    main()